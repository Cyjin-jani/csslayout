/* FLEXBOX에서는 자식과 대화하지 않음(?)
컨테이너가 필요. */

/* flexbox 컨테이너 */
/* flex-direction row 가 기본(default) 옵션 */
.father {
  display: flex;
  /* flex-direction: column; */
  /* main axis가 row(가로)라면, cross axis는 column(세로)가 된다. */
  /* 단, flex-direction이 row가 아닌 경우, 반대가 됨. */
  /* main axis방향으로 item들을 움직임. */
  justify-content: space-around;
  /* cross axis 방향으로 item을 움직임. */
  /* align-items: center; */
  /* align-items의 효과를 보기 위해 아래 높이를 추가 */
  height: 80vh;
  width: 100%;
  /* 같은 줄(라인)에 있어야 함. 자식요소의 width가 조정됨. */
  /* flex-wrap: nowrap; */
  /* 자식 요소의 width를 지키면서 한 줄에 넣고, 범위를 넘으면 다음 줄로 넘김. */
  /* flex-wrap: wrap; */
  /* 하나의 라인의 요소들을 변경할 수 있음  */
  /* 여기서는 father라는 블록의 라인을 기준으로 정렬함. */
  /* align-content: center; */
}

.child {
  background-color: rgb(190, 156, 121);
  /* flex-basis */
  /* main axis에서 적용됨. */
  /* 초기에 엘리먼트의 크기를 지정. 늘어나거나 줄어들기 전에만 유효 */
  /* width 혹은 height가 됨 => flex-direction에 따라 정해짐. */
  /* flex-basis: 30%; */
  width: 200px;
  height: 200px;
  color: wheat;
  font-size: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 자식 요소에서 정렬을 할 수 있는 두 가지 속성 align-self, order */
/* 자식 요소 한 개만 cross axis 방향으로 정렬하는 align-self */
/* .child:nth-child(2) {
  align-self: center;
} */

/* html을 직접 변경하기 어려운 경우, order를 사용해서 요소의 순서를 바꿀 수 있음 */
/* order의 기본 값은 0이다.  */
/* 즉, 아래는 기본값 보다 크기 때문에 더 나중이 됨. (작을 수록 우선) */
/* .child:nth-child(2) {
  order: 1; 
} */

/* 아래 두 속성은 반응형 화면을 만들기에 유리하다. */
/* flex-shrink */
/* width에 영향이 가는 경우, 다른 요소들에 비해 2배로 줄어듦. */
/* 기본값은 1임. */
/* 
.child:nth-child(2) {
  background-color: #000;
  flex-shrink: 2;
} 
.child:nth-child(3) {
  flex-shrink: 4;
}
*/

/* flex-grow */
/* shrink와 반대로, 여유가 있으면 요소가 늘어나는 grow가 있다. */
/* default값이 0이다 */
/* 아래와 같은 경우, 남은 공간의 2/3을 2번자식요소가 가져가고 나머지를 3번 자식 요소가 가져감. */
/* .child:nth-child(2) {
  background-color: #000;
  flex-grow: 2;
}
.child:nth-child(3) {
  flex-grow: 1;
} */

