@import url("https://fonts.googleapis.com/css2?family=B612+Mono&family=DM+Serif+Display:ital@0;1&display=swap");
// 변수를 저장한 파일을 import하여 부른다.
@import "_variables";
@import "_mixins";
@import "_buttons";

//*******************************
//Variables
//*******************************

// 저장된 변수를 사용하는 법은 아래와 같다.

// a {
//   color: $bg;
// }

// h1 {
//   font-size: $title;
// }

// h2 {
//   color: $bg;
// }

//*******************************
// Nesting
//*******************************
// .box {
//   margin-top: 20px;
//   h2 {
//     color: blue;
//   }
//   button {
//     color: red;
//   }
// }
// 아래처럼 쓰지 않고, nesting을 활용하여 위와 같이 코드를 작성할 수 있게 된다.
// 즉, 자식요소들에 대해 선택자를 작성하는 데 있어서, 보다 직관적이게 할 수 있다는 것이다.
// 위의 코드는 즉, class가box인 요소의 자식요소가 h2태그 요소와 버튼 요소가 있고, 그 각각에 css 스타일을 정해준 것이다.


// .box h2 {
//   color: blue;
// }

// .box button {
//   color: red;
// }

// 또한, 아래와 같이 hover 같은 기능에 스타일링을 하는 경우는,
// .box:hover {
//   background-color: greenyellow;
// }

// .box {
//   margin-top: 20px;
//   &:hover {
//     background-color: greenyellow;
//   }
//   h2 {
//     color: blue;
//   }
//   button {
//     color: red;
//   }
// }
//이처럼, & 기호를 이용하여 사용이 가능하다.


// 또한, nesting 안에서 또다른 nesting이 가능하다.
// 아래 예시를 보자.

// .box {
//   margin-top: 20px;
//   &:hover {
//     background-color: greenyellow;
//   }
//   h2 {
//     color: blue;
//     &:hover {
//       color: red;
//     } 
//   }
//   button {
//     color: red;
//   }
// }

//*******************************
// mixin
//*******************************

//일반적인 사용법
// h1 {
//   @include mainTitle();
// }

//파라미터에 프로퍼티(속성)을 넘기는 경우
// a {
//   margin-bottom: 10px;
//   &:nth-child(odd) {
//     @include link(blue);
//   }
  
//   &:nth-child(even) {
//     @include link(red);
//   }
// }

//파라미터에 속성의 값이 아닌, 문자열을 보내는 경우
// a {
//   margin-bottom: 10px;
//   &:nth-child(odd) {
//     @include link("odd");
//   }
  
//   &:nth-child(even) {
//     @include link("even");
//   }
// }

//about content
// a {
//   @include responsive {
//     text-decoration: none; //여기가 content부분이 됨.
//   }
// }

h1 {
  color: red;
  @include responsive("iphone") {
    color: yellow;
  }
  @include responsive("iphone-l") {
    font-size: 60px;
  }
  @include responsive("tablet") {
    color:green;
  }
}

//*******************************
// extends
//*******************************
// 다른 코드를 확장하거나, 코드를 재사용하고 싶을 때 사용.
// style을 분리할 수 있게 해줌. 또한 더 추가도 가능함.
// extends에는 공통적인 스타일 속성들을 지정하고, 아래와 같이 태그에 따라서 다른 속성들을 적용해주면 됨.

// a {
//   @extend %button;
//   text-decoration: none;
// }

// button {
//   @extend %button;
//   border: none;
// }