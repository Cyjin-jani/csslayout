/* GRID 에 대하여. */
/* flexbox로는 그리드 (격자)를 만들기 어렵다. */
/* 아래가 flex만으로는 만들기 어려운 이유임. */
/* .father {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.child {
  flex-basis: 30%;
  background-color: burlywood;
  color: white;
  font-size: 50px;
  font: bold;
  display: flex;
  justify-content: center;
  align-items: center;
}

.child:nth-child(4) {
  margin-top: 10px;
} */

/* --------------------------------- */
/* 그리드 Basic Concepts */
/* --------------------------------- */

/* .father { */
  /* display: grid; */
  /* 원하는 갯수, 크기 만큼 그리드 지정 가능. 가로 방향으로 그리드 갯수가 정해진다. */
  /* grid-template-columns: 250px 250px 250px;  */
  /* 그리드 사이에 여백을 줄 수 있는 갭. */
  /* gap: 10px; */
  /* 위와 같이 한번에 선언해도 되고, 가로 세로 다른 여백값을 주고 싶으면 아래와 같이 따로따로 지정. */
  /* column-gap: 10px;
  row-gap: 10px; */

  /* row의 크기를 지정하지 않는 다면 그리드 요소의 내용(컨텐츠)에 맞춰짐... */
  /* 예를 들어, 글자가 있다면 글자의 폰트 사이즈에 맞춰짐. */
  /* row의 크기는 아래와 같이 정할 수 있다. */
  /* grid-template-rows:  100px 80px 300px; */

/* } */
/* .child {
  background-color: burlywood;
  color: white;
  font-size: 50px;
  font: bold;
  display: flex;
  justify-content: center;
  align-items: center;
} */


/* --------------------------------- */
/* 그리드 templates area로 레이아웃 만들기*/
/* --------------------------------- */

/* grid-template-columns: 200px 200px 200px 200px;
grid-template-rows: 300px 300px 300px 300px; */
/* 위와 같이 쓰기 불편하므로, repeat함수를 쓰자. */

/* .grid {
  display: grid;
  grid-template-columns: auto 200px;
  grid-template-rows: 100px repeat(2, 200px) 100px;
  grid-template-areas: 
    "header header header header"
    "content content content nav"
    "content content content nav"
    "footer footer footer footer"
  ;
}

.header {
  background-color: #2ecc71;
  grid-area: header;
}

.content {
  background-color: #3498db;
  grid-area: content;
}

.nav {
  background-color: #8e44ad;
  grid-area: nav;
}

.footer {
  background-color: #f39c12;
  grid-area: footer;
} */


/* --------------------------------- */
/* 그리드 templates area이해하기. (Rows and Columns)*/
/* --------------------------------- */

/* .grid {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-template-rows: repeat(4, 100px);
  gap: 10px;
} */

/* grid-column-start, end는 컬럼 내 요소를 나타내는게 아니고, 라인을 나타낸다. */
/* 즉, 아래 코드는 첫번째 줄에서 시작해서 5번째 줄에서 끝난다는 얘기. */
/* grid-column-start: 1; grid-column-end: 5; */
/* 위 코드와 같은 역할을 하지만, 짧게 줄여서 사용도 가능하다. (column, row 모두 가능) */
/* -1은 결국 맨 마지막까지라는 뜻이다. (라인을 따로 셀 필요가 없어서 편함) */
/* -2는 맨 마지막에서 두 번째이다. */
/* 만약, 처음부터 끝까지라고 한다면, 그냥 span이라는 걸 사용해도 된다. 4개의 칸(공간)을 쓴다는 뜻과 비슷. */
/* .header {
  background-color: #2ecc71;
  grid-column: span 4;
}

.content {
  background-color: #3498db;
  grid-column: 1 / -2;
  grid-row: 2 / span 2;
} */
/* 그냥 span 2도 가능 (아래 nav가 span 2이기에) */

/* .nav {
  background-color: #8e44ad;
  grid-row: span 2;
}

.footer {
  background-color: #f39c12;
  grid-column: 1 / -1;
} */


/* 라인 네이밍 */
/* 일일이 나열해서 라인에 이름을 붙일 수도 있고, repeat에 이름을 한꺼번에 같은 이름으로 넣을 수도 있다. */
/* 단, repeat의 경우에는, 첫번째 라인이 지정되지 않으므로, 라인지정이 조금 꼬일 수 있다. (원래 2-4라면 1-3으로 수정) */
.grid {
  display: grid;
  grid-template-columns: [first-line] 100px [second-line] 100px [third-line] 100px [fourth-line] 100px [fifth-line];
  grid-template-rows: repeat(4, 100px [my-line]);
  gap: 10px;
}

.header {
  background-color: #2ecc71;
  grid-column: span 4;
}
/* 보통은 column처럼 이름을 정해서 쓸 수 있음. */
 /* row처럼 repeat으로 라인을 정한 경우(my-line) 아래와 같이 사용됨... */
.content {
  background-color: #3498db;
  grid-column: first-line / fourth-line;
  grid-row: my-line 1 / my-line 3;
}

.nav {
  background-color: #8e44ad;
  grid-row: span 2;
}

.footer {
  background-color: #f39c12;
  grid-column: 1 / -1;
}
